# implementation of Spaceship - program template for RiceRocks
import simplegui
import math
import random

# globals for user interface
width = 800
height = 600
score = 0
lives = 3
time = 0
started = False

# globals for explosion
explosion_group = set([])

# constants
ACCELERATION = .1
COF = 0.03
ANGLE_VEL = 0.05

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p, q):
    return math.sqrt((p[0] - q[0]) ** 2 + (p[1] - q[1]) ** 2)

def process_sprite_group(sprite_set, canvas):
    # this function is going to draw each of the sprite on the canvas
    alive = True
    for sprite in list(sprite_set):
        sprite.draw(canvas)
        alive = sprite.update()
        if not alive:
            sprite_set.remove(sprite)

def group_collide(sprite_set, other_object):
    global explosion_group
    counter = 0
    for sprite in list(sprite_set):
        if sprite.collide(other_object):
            explosion_group.add(Sprite(sprite.get_position(), [0, 0], 0, 0, explosion_image, explosion_info, explosion_sound))
            sprite_set.remove(sprite)
            counter += 1
    return counter

def group_group_collide(sprite_set1, sprite_set2):
    counter = 0
    for sprite in list(sprite_set1):
        # check if the missile collides with the any of the rocks
        if group_collide(sprite_set2, sprite):
            sprite_set1.remove(sprite)
            counter += 1
    return counter
       
# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
        
    def set_thrust(self, on):
        self.thrust = on
        if on:
            ship_thrust_sound.rewind()
            ship_thrust_sound.play()
        else:
            ship_thrust_sound.pause()
            
    def increment_angle_vel(self):
        self.angle_vel += .05
        
    def decrement_angle_vel(self):
        self.angle_vel -= .05
        
    def shoot(self):
        global missile_group
        forward = angle_to_vector(my_ship.angle)
        missile_vel = 5
        a_missile = Sprite([self.pos[0] + (self.image_size[0] / 2) * forward[0], self.pos[1] + (self.image_size[0] / 2) * forward[1]],\
                        [self.vel[0] + missile_vel * forward[0], self.vel[1] + missile_vel * forward[1]], 0, 0, missile_image, missile_info, missile_sound)
        missile_group.add(a_missile)
        
    def draw(self,canvas):
        if self.thrust:
            canvas.draw_image(self.image, [self.image_center[0] + self.image_size[0], self.image_center[1]],
                              self.image_size, self.pos, self.image_size, self.angle)
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)

    def update(self):
        # position update
        self.pos[0] = (self.pos[0] + self.vel[0]) % width
        self.pos[1] = (self.pos[1] + self.vel[1]) % height
        
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        
        # friction update
        self.vel[0] *= (1 - COF)
        self.vel[1] *= (1 - COF)
        
        # accelerate
        if self.thrust:
            forward = angle_to_vector(my_ship.angle)
            self.vel[0] += forward[0] * ACCELERATION
            self.vel[1] += forward[1] * ACCELERATION
            
        # angle update    
        self.angle += self.angle_vel
    
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
        
    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
    
    def collide(self, other_object):
        return dist(self.get_position(), other_object.get_position()) < (self.get_radius() + other_object.get_radius())
    
    def draw(self, canvas):
        if not self.animated:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
        else:
            index = self.age % 24
            current_center = [self.image_center[0] + index * self.image_size[0], self.image_center[1]]
            canvas.draw_image(self.image, current_center, self.image_size, self.pos, self.image_size, self.angle)
    
    def update(self):
        # update position
        self.pos[0] = (self.pos[0] + self.vel[0]) % width
        self.pos[1] = (self.pos[1] + self.vel[1]) % height
        
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        
        self.angle += self.angle_vel
        
        # aging
        self.age += 1
        if self.age <= self.lifespan:
            return True
        else:
            return False
        
# mouseclick handlers that reset UI and conditions whether splash image is drawn
def click(pos):
    global started, score, lives
    center = [width / 2, height / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        started = True
        soundtrack.rewind()
        soundtrack.play()
        lives = 3
        score = 0
        timer.start()
       
# event handlers           
def draw(canvas):
    global time, started, lives, score, rock_group
    
    # animiate background
    time += 1
    center = debris_info.get_center()
    size = debris_info.get_size()
    wtime = (time / 8) % center[0]
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [width/2, height/2], [width, height])
    canvas.draw_image(debris_image, [center[0] - wtime, center[1]], [size[0] - 2 * wtime, size[1]], 
                                [width / 2 + 1.25 * wtime, height / 2], [width - 2.5 * wtime, height])
    canvas.draw_image(debris_image, [size[0] - wtime, center[1]], [2 * wtime, size[1]], 
                                [1.25 * wtime, height / 2], [2.5 * wtime, height])

    # draw ship and sprites
    my_ship.draw(canvas)
    
    # process group of rocks and missiles
    process_sprite_group(rock_group, canvas)
    process_sprite_group(missile_group, canvas)
    process_sprite_group(explosion_group, canvas)
    
    # update ship and sprites
    my_ship.update()
    
    # detect collisions
    if group_collide(rock_group, my_ship):
        lives -= 1
        
    score += (group_group_collide(missile_group, rock_group)) * 10
    
    # draw UI
    canvas.draw_text("Lives", [50, 50], 20, "white")
    canvas.draw_text(str(lives), [50, 75], 20, "white")
    canvas.draw_text("Score", [700, 50], 20, "white")
    canvas.draw_text(str(score), [700, 75], 20, "white")
    
    # draw splash screen if not started
    if not started:
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [width/2, height/2], 
                          splash_info.get_size())
    # game over
    if not lives:
        started = False
        rock_group = set([])
        timer.stop()
        soundtrack.pause()

def keydown(key):
    if key == simplegui.KEY_MAP['left']:
        my_ship.decrement_angle_vel()
    elif key == simplegui.KEY_MAP['right']:
        my_ship.increment_angle_vel()
    elif key == simplegui.KEY_MAP['up']:
        my_ship.set_thrust(True)
    elif key == simplegui.KEY_MAP['space']:
        my_ship.shoot()
        
def keyup(key):
    if key == simplegui.KEY_MAP['left']:
        my_ship.increment_angle_vel()
    elif key == simplegui.KEY_MAP['right']:
        my_ship.decrement_angle_vel()
    elif key == simplegui.KEY_MAP['up']:
        my_ship.set_thrust(False)
    
# timer handler that spawns a rock    
def rock_spawner():
    global rock_group
    if len(rock_group) <= 12:
        ship_pos = my_ship.get_position()
        ship_radius = my_ship.get_radius()
        # rock_radiu = 40, make the rock not hit the ship as soon as it has been spawned
        rock_pos_x = random.randrange((width - (ship_pos[0] + ship_radius + 40)) // -1, (ship_pos[0] - (ship_radius + 40)) // 1)
        rock_pos_y = random.randrange((height - (ship_pos[1] + ship_radius + 40)) // -1, (ship_pos[1] - (ship_radius + 40)) // 1)   
        rock_pos = [rock_pos_x, rock_pos_y]
        rock_vel = [random.random() * (.6 + (score // 100) * .2) - .3 - (score // 100) * .1, random.random() * (.6 + (score // 100) * .2) - .3 - (score // 100) * .1]
        rock_avel = random.random() * .2 - .1
        a_rock = Sprite(rock_pos, rock_vel, 0, rock_avel, asteroid_image, asteroid_info)    
        rock_group.add(a_rock)
    
# initialize frame
frame = simplegui.create_frame("Asteroids", width, height)

# initialize ship and two sprites
my_ship = Ship([width / 2, height / 2], [0, 0], 0, ship_image, ship_info)
rock_group = set([])
missile_group = set([])

# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(click)

timer = simplegui.create_timer(1000.0, rock_spawner)

# get things rolling
frame.start()
