//C++_Sorting

//Swap
void Swap(int* array, int x, int y) {

    int temp = array[x];
    array[x] = array[y];
    array[y] = temp;
}

//SelectSort
//Unstable
/*排序过程：给定一个数值集合，循环遍历集合，每次遍历从集合中选择出最小或最大的放入集合的开头或结尾的位置，下次循环从剩余的元素集合中遍历找出最小的并如上操作，最后直至所有原集合元素都遍历完毕，排序结束。*/
void SelectSort(int* array, int size) {

    int minIndex;
    for(int i = 0; i < size; i++) {

        minIndex = i;
        for(int j = i + 1; j < size; j++) {

            if(array[minIndex] > array[j]) {

                minIndex = j;
            }
        }

        if(minIndex != i) {

            Swap(array, i, minIndex);
        }
    }
}

//BubbleSort
//Stable
/*排序过程：冒泡排序的过程形如其名，就是依次比较相邻两个元素，优先级高（或大或小）的元素向后移动，直至到达序列末尾，无序区间就会相应地缩小。下一次再从无序区间进行冒泡操作，依此循环直至无序区间为1，排序结束。*/
void BubbleSort(int* array, int size) {

    for(int i = 0; i < size; i++) {

        for(int j = 1; j < size - i; j++) {

            if(array[j] < array[j - 1]) {

                Swap(array, j, j - 1);
            }
        }
    }
}

//InsertSort
//Stable
/*排序过程：将前面的区间（初始区间为1，包含第一个元素）视作有序区间，然后将有序区间的后一元素插入到前面有序区间的适当位置。直至有有序区间扩展到原区间的大小，排序结束。*/
void InsertSort(int* array, int size) {

    for(int i = 1; i < size; i++) {

        for(int j = i; j > 0; j--) {

            if(array[j] < array[j - 1]) {

                Swap(array, j, j-1);
            }
        }
    }
}

//QuickSort
//Unstable
/*排序过程：快速排序应该是应用最广泛的排序算法，它是采用了分治的思想（这种思想很重要）。其基本的思想就是任取待排序序列中的某个元素（元素的选取方式在一定程序上会影响实现过程和排序效率）作为标杆，将待排序序列划分为左右两个子序列，左侧元素小于标杆元素，右侧元素大于标杆元素，标杆元素则排在这两个子序列的中间，然后再对这两个子序列重复上述的方法，直至排序结束。*/
void QuickSort(int* array, int left, int right) {

    if(left < right) {

        int i = left -1, j = right + 1;
        int mid = array[(left + right) / 2];
        while(true) {

            while(array[++i] < mid);
            while(array[--j] > mid);
            if(i >= j) {

                break;
            }

            Swap(array, i, j);
        }

        QuickSort(array, left, i - 1);
        QuickSort(array, j + 1, right);
    }
}

//MergeSort
//Stable
/*排序过程：归并排序的原理比较简单，也是基于分治思想的。它将待排序的元素序列分成两个长度相等的子序列，然后为每一个子序列排序，然后再将它们合并成一个序列。*/
void MergeSort(int* array, int left, int right) {

    if(left < right) {

        int mid = (left + right) / 2;
        MergeSort(array, left, mid);
        MergeSort(array, mid + 1, right);
        Merge(array, left, mid, right);
    }
}
void Merge(int* array, int left, int mid, int right) {

    int* temp = new int[right - left + 1];
    int i = left, j = mid + 1, m = 0;
    while(i <= mid && j <= right) {

        if(array[i] < array[j]) {

            temp[m++] = array[i++];
        }

        else {

            temp[m++] = array[j++];
        }
    }

    while(i <= mid) {

        temp[m++] = array[i++];
    }

    while(j <= right) {

        temp[m++] = array[j++];
    }

    for(int n = left, m = 0; n <= right; n++, m++) {

        array[n] = temp[m];
    }

    delete temp;
}

//HeapSort
//Unstable
/*排序过程：堆排序的过程分为两个步骤，第一步是根据初始输入数据，建立一个初始堆；第二步是将堆顶元素与当前无序区间的最后一个元素进行交换，然后再从堆顶元素开始对堆进行调整。*/
void HeapSort(int* array, int size) {

    int lastP = size / 2;
    //從最後一個有孩子的結點開始建初始堆
    for(int i = lastP - 1; i >= 0; i--) {

        HeapAjust(array, i, size);
    }

    int j = size;
    //將堆頂元素和無序區間的最後一個元素交換，再調整堆
    while(j > 0) {

        Swap(array, 0, j - 1);
        j--;
        HeapAjust(array, 0, j);
    }
}
void HeapAjust(int *array, int toAjust, int size) {

    int pos = toAjust;
    while((pos * 2 + 1) < size) {

        int lChild = pos * 2 + 1;
        if(array[lChild] > array[pos]) {

            pos = lChild;//左孩子大
        }

        int rChild = lChild + 1;
        if(rChild < size && array[rChild] > array[pos]) {

            pos = rChild;//右孩子更大
        }

        //父結點比其中一個孩子小
        if(pos != toAjust) {

            Swap(array, toAjust, pos);
            toAjust = pos;
        }

        else {

            break;
        }
    }
}

//TreeSort
//Unknown
/*排序过程：排序树算法应用了AVL树的原理，只不过排序树不是平衡的，它的特点就是父结点元素总是比左孩子元素要大却比右孩子元素要小。根据这个特点，可以将原数组元素组织成排序树，然后在对排序树进行中序遍历，中序遍历的结果就是排好序的序列。在算法的实现中采用的数组的形式来存储排序树，并采用的三个辅助数组来表示元素与元素之间在树中的关系，这三个辅助数组分别是父结点索引表、左孩子索引个、右孩子索引表。最后采用了递归的方法对排序树进行了中序遍历。*/
void TreeSort(int* array, int size) {

    int *parent = new int[size];//父結點子針
    int *lChild = new int[size];//左孩子子針
    int *rChild = new int[size];//右孩子子針
    //將各結點左右子結點指標均置為-1，表示沒有左右子結點
    for(int i = 0; i < size; i++) {

        lChild[i] = -1;
        rChild[i] = -1;
    }

    parent[0] = -1; //將第一個元素作為根結點，其父結點置為-1
    //從第2個數開始構造樹
    for(int i = 1; i < size; i++) {

        int last = 0;
        while(true) {

            int compare = array[i] - array[last];
            //比當前值大，進入右子樹
            if(compare > 0) {

                if(rChild[last] == -1) {

                    rChild[last] = i;
                    parent[i] = last;
                    break;
                }

                else {

                    last = rChild[last];
                }
            }

            //比當前值小，進入左子樹
            else {

                if(lChild[last] == -1) {

                    lChild[last] = i;
                    parent[i] = last;
                    break;
                }

                else {

                    last = lChild[last];
                }
            }
        }
    }

    //保存排序樹的中序遍歷結果
    int* midRetrival = new int[size];
    TreeMidRetrival(array, midRetrival, 0, lChild, rChild);
    //將排好序的中序數組複製到原陣列
    for(int i = 0; i < size; i++) {

        array[i] = midRetrival[i];
    }
}
//中序遍歷
void TreeMidRetrival(int *array, int* temp, int pos, int* lChild, int* rChild) {

    static int i = 0;
    if(pos != -1) {

        TreeMidRetrival(array, temp, lChild[pos], lChild, rChild);//遍歷左子樹
        temp[i++] = array[pos];//保存當前值
        TreeMidRetrival(array, temp, rChild[pos], lChild, rChild);//遍歷右子樹
    }

    else {

        return;
    }
}

//ShellSort
//Unsatble
/*Unknown*/
void ShellSort(int array[],int n) {

    for(int delta=n/2;delta>0;delta/=2) {

        for(int i=0;i<delta;i++) {

            for(int j=i+delta;j<n;j+=delta) {

                for(int k=j;k>0;k-=delta) {

                    if(array[k]<array[k-1]) {

                        swap(array,k,k-1);
                    }  
                }  
            }  
        }  
    }  
}

//BaseSort
//Stable
/*Unknown*/
//计算关键字位数的最大值
int KeySize(int array[],int size) {

    int key_size=1;    
    for(int i=0;i<size;i++) {

        int temp=1;  
        int n=10;  
        while(array[i]/n>0) {

            temp++;  
            n*=10;  
        }

        key_size=(temp>key_size)?temp:key_size;  
    }  

    return key_size;  
}  
//基数排序  
void RadixSort(int array[],int size) {

    int bucket[10][10]={0};//定义基数桶  
    int order[10]={0};//保存每个基数桶之中的元素个数  
    int key_size=KeySize(array,size);//计算关键字位数的最大值      
    for(int n=1;key_size>0;n*=10,key_size--) { 

        //将待排序的元素按照关键值的大小依次放入基数桶之中  
        for(int i=0;i<size;i++) {

            int lsd=(array[i]/n)%10;  
            bucket[lsd][order[lsd]]=array[i];  
            order[lsd]++;  
        }  
  
        //将基数桶中的元素重新串接起来 
        int k=0;  
        for(i=0;i<10;i++) {

            if(order[i]!=0) {

                for(int j=0;j<order[i];j++) {

                    array[k]=bucket[i][j];  
                    k++;  
                }

                order[i]=0;  
            }  
        }  
    }  
}